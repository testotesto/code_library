package com.munkychop.air.net{	import com.munkychop.air.events.SVNEvent;		import flash.desktop.NativeProcess;	import flash.desktop.NativeProcessStartupInfo;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.NativeProcessExitEvent;	import flash.events.ProgressEvent;	import flash.filesystem.File;	public class SVNConnection extends EventDispatcher	{		//-------------------------------------------------------------------------------		//--private properties		//-------------------------------------------------------------------------------		private var _localSupportDirectory:File;		private var _localRepoDirectory:File;		private var _workingDirectory:File;		private var _executableFile:File;		private var _nativeProcess:NativeProcess;		private var _nativeProcessStartupInfo:NativeProcessStartupInfo;		private var _nativeProcessArgsVector:Vector.<String>;		private var _nativeProcessEventHandlerObject:Object;				private var _nativeProcessRunning:Boolean;				//client/resources/trims/pngs/large_3_4_280x169		//-------------------------------------------------------------------------------		//--constructor		//-------------------------------------------------------------------------------		public function SVNConnection (localSupportDirectory:File, localRepoDirectory:File)		{			_nativeProcessRunning = false;						// TODO : check the OS and assign the appropriate system location of SVN			_executableFile = new File ("/usr/bin/svn");						_localSupportDirectory = localSupportDirectory;			_localRepoDirectory = localRepoDirectory;						_nativeProcessArgsVector = new Vector.<String>;			_nativeProcessStartupInfo = new NativeProcessStartupInfo ();			_nativeProcessStartupInfo.executable = _executableFile;			_nativeProcess = new NativeProcess ();			_nativeProcessEventHandlerObject = new Object ();		}				//-------------------------------------------------------------------------------		//--public methods		//-------------------------------------------------------------------------------		public function listBranchNames (url:String, username:String, password:String):void		{			if (!_nativeProcessRunning)			{				_nativeProcessRunning = true;								_nativeProcessArgsVector.push ("list");				_nativeProcessArgsVector.push (url);				_nativeProcessArgsVector.push ("--username");				_nativeProcessArgsVector.push (username);				_nativeProcessArgsVector.push ("--password");				_nativeProcessArgsVector.push (password);								_nativeProcessStartupInfo.workingDirectory = _localSupportDirectory;				_nativeProcessStartupInfo.arguments = _nativeProcessArgsVector;								_nativeProcessEventHandlerObject.standardOutputDataHandler = listBranchNamesOutputDataHandler;				//_nativeProcessEventHandlerObject.standardInputProgressHandler = undefined;				_nativeProcessEventHandlerObject.exitHandler = listBranchNamesExitHandler;				_nativeProcessEventHandlerObject.standardErrorDataHandler = standardErrorDataHandler;				_nativeProcessEventHandlerObject.standardErrorIOErrorHandler = standardErrorIOErrorHandler;								addNativeProcessListeners ();								_nativeProcess.start (_nativeProcessStartupInfo);								dispatchEvent (new SVNEvent (SVNEvent.LIST_COMMAND_STARTED));			}			else			{				trace ("\n\n" + "a native process is already running!!!" + "\n\n");			}		}				public function cleanupLocalRepo (localBranchDirectory:String):void		{			if (!_nativeProcessRunning)			{				_nativeProcessRunning = true;								_nativeProcessArgsVector.push ("cleanup");				_nativeProcessArgsVector.push (localBranchDirectory);								_nativeProcessStartupInfo.workingDirectory = _workingDirectory;				_nativeProcessStartupInfo.arguments = _nativeProcessArgsVector;								_nativeProcessEventHandlerObject.standardOutputDataHandler = cleanupLocalRepoOutputDataHandler;				//_nativeProcessEventHandlerObject.standardInputProgressHandler = undefined;				_nativeProcessEventHandlerObject.exitHandler = cleanupLocalRepoExitHandler;				_nativeProcessEventHandlerObject.standardErrorDataHandler = standardErrorDataHandler;				_nativeProcessEventHandlerObject.standardErrorIOErrorHandler = standardErrorIOErrorHandler;								addNativeProcessListeners ();								_nativeProcess.start (_nativeProcessStartupInfo);								dispatchEvent (new SVNEvent (SVNEvent.CLEANUP_COMMAND_STARTED));			}			else			{				trace ("\n\n" + "a native process is already running!!!" + "\n\n");			}		}				public function checkout (url:String, username:String=null, password:String=null):void		{			if (!_nativeProcessRunning)			{				_nativeProcessRunning = true;								_nativeProcessArgsVector.push ("co");				_nativeProcessArgsVector.push (url);				_nativeProcessArgsVector.push (_workingDirectory.nativePath);								if (username != null && password != null)				{					_nativeProcessArgsVector.push ("--username");					_nativeProcessArgsVector.push (username);					_nativeProcessArgsVector.push ("--password");					_nativeProcessArgsVector.push (password);				}								_nativeProcessStartupInfo.workingDirectory = _workingDirectory;				_nativeProcessStartupInfo.arguments = _nativeProcessArgsVector;								_nativeProcessEventHandlerObject.standardOutputDataHandler = checkoutRepoOutputDataHandler;				//_nativeProcessEventHandlerObject.standardInputProgressHandler = undefined;				_nativeProcessEventHandlerObject.exitHandler = checkoutRepoExitHandler;				_nativeProcessEventHandlerObject.standardErrorDataHandler = standardErrorDataHandler;				_nativeProcessEventHandlerObject.standardErrorIOErrorHandler = standardErrorIOErrorHandler;								addNativeProcessListeners ();								_nativeProcess.start (_nativeProcessStartupInfo);								dispatchEvent (new SVNEvent (SVNEvent.CHECKOUT_COMMAND_STARTED));			}			else			{				trace ("\n\n" + "a native process is already running!!!" + "\n\n");			}		}				public function exportFile (url:String, username:String=null, password:String=null):void		{			if (!_nativeProcessRunning)			{				_nativeProcessRunning = true;											_nativeProcessArgsVector.push ("export");				_nativeProcessArgsVector.push (url);								if (username != null && password != null)				{					_nativeProcessArgsVector.push ("--username");					_nativeProcessArgsVector.push (username);					_nativeProcessArgsVector.push ("--password");					_nativeProcessArgsVector.push (password);				}								_nativeProcessStartupInfo.workingDirectory = _workingDirectory;				_nativeProcessStartupInfo.arguments = _nativeProcessArgsVector;								_nativeProcessEventHandlerObject.standardOutputDataHandler = exportFileOutputDataHandler;				//_nativeProcessEventHandlerObject.standardInputProgressHandler = undefined;				_nativeProcessEventHandlerObject.exitHandler = exportFileExitHandler;				_nativeProcessEventHandlerObject.standardErrorDataHandler = standardErrorDataHandler;				_nativeProcessEventHandlerObject.standardErrorIOErrorHandler = standardErrorIOErrorHandler;								addNativeProcessListeners ();								_nativeProcess.start (_nativeProcessStartupInfo);								dispatchEvent (new SVNEvent (SVNEvent.EXPORT_COMMAND_STARTED));			}			else			{				trace ("\n\n" + "a native process is already running!!!" + "\n\n");			}		}				public function add (filename:String, workingDirectory:File):void		{			if (!_nativeProcessRunning)			{				_nativeProcessRunning = true;								_nativeProcessArgsVector.push ("add");				_nativeProcessArgsVector.push (filename);								_nativeProcessStartupInfo.workingDirectory = workingDirectory;				_nativeProcessStartupInfo.arguments = _nativeProcessArgsVector;								_nativeProcessEventHandlerObject.standardOutputDataHandler = addOutputDataHandler;				//_nativeProcessEventHandlerObject.standardInputProgressHandler = undefined;				_nativeProcessEventHandlerObject.exitHandler = addExitHandler;				_nativeProcessEventHandlerObject.standardErrorDataHandler = standardErrorDataHandler;				_nativeProcessEventHandlerObject.standardErrorIOErrorHandler = standardErrorIOErrorHandler;								addNativeProcessListeners ();								_nativeProcess.start (_nativeProcessStartupInfo);								dispatchEvent (new SVNEvent (SVNEvent.ADD_COMMAND_STARTED));			}			else			{				trace ("\n\n" + "a native process is already running!!!" + "\n\n");			}		}				// TODO : check if the _workingDirectory var is going to cause an incorrect reference somewhere if it isn't set before a method call from CMS.mxml. remove this global and pass a reference when necessary				public function commit (message:String, filename:String, workingDirectory:File, username:String=null, password:String=null):void		{			if (!_nativeProcessRunning)			{				_nativeProcessRunning = true;								_nativeProcessArgsVector.push ("commit");				_nativeProcessArgsVector.push ("-m");				_nativeProcessArgsVector.push (message);				_nativeProcessArgsVector.push (filename);								if (username != null && password != null)				{					_nativeProcessArgsVector.push ("--username");					_nativeProcessArgsVector.push (username);					_nativeProcessArgsVector.push ("--password");					_nativeProcessArgsVector.push (password);				}								_nativeProcessStartupInfo.workingDirectory = workingDirectory;				_nativeProcessStartupInfo.arguments = _nativeProcessArgsVector;								_nativeProcessEventHandlerObject.standardOutputDataHandler = commitOutputDataHandler;				//_nativeProcessEventHandlerObject.standardInputProgressHandler = undefined;				_nativeProcessEventHandlerObject.exitHandler = commitExitHandler;				_nativeProcessEventHandlerObject.standardErrorDataHandler = standardErrorDataHandler;				_nativeProcessEventHandlerObject.standardErrorIOErrorHandler = standardErrorIOErrorHandler;								addNativeProcessListeners ();								_nativeProcess.start (_nativeProcessStartupInfo);								dispatchEvent (new SVNEvent (SVNEvent.COMMIT_COMMAND_STARTED));			}			else			{				trace ("\n\n" + "a native process is already running!!!" + "\n\n");			}		}				public function exitCurrentProcess ():void		{			trace ("application close");						if (_nativeProcessRunning)			{				if (_nativeProcess.hasEventListener(NativeProcessExitEvent.EXIT))				{					removeNativeProcessListeners ();								clearObjectsAssociatedWithNativeProcess ();				}								_nativeProcess.exit ();			}						trace ("Native SVN process exit event triggered by user closing application." + "\n" + "Application will now exit");						dispatchEvent (new SVNEvent (SVNEvent.SVN_PROCESS_EXIT));						/*			_localSupportDirectory.addEventListener (Event.COMPLETE, dispatchExitEvent);			_localSupportDirectory.deleteDirectoryAsync (true);						function dispatchExitEvent (event:Event):void			{				dispatchEvent (new SVNEvent (SVNEvent.READY_TO_EXIT));				trace ("temporary directory deleted");			}			*/		}				//-------------------------------------------------------------------------------		//--get/set methods		//-------------------------------------------------------------------------------		public function get nativeProcessRunning ():Boolean		{			return _nativeProcessRunning;		}				public function set nativeProcessRunning (booleanState:Boolean):void		{			_nativeProcessRunning = booleanState;		}				public function get localSupportDirectory ():File		{			return _localSupportDirectory;		}				public function set localSupportDirectory (localSupportDirectory:File):void		{			_localSupportDirectory = localSupportDirectory;			_localSupportDirectory.createDirectory ();		}				public function get localRepoDirectory ():File		{			return _localRepoDirectory;		}				public function set localRepoDirectory (localRepoDirectory:File):void		{			_localRepoDirectory = localRepoDirectory;		}				public function get workingDirectory ():File		{			return _workingDirectory;		}				public function set workingDirectory (directoryFile:File):void		{			_workingDirectory = directoryFile;		}				//-------------------------------------------------------------------------------		//--private methods		//-------------------------------------------------------------------------------		private function cleanupLocalRepoOutputDataHandler (event:ProgressEvent):void		{			var output:String = _nativeProcess.standardOutput.readUTFBytes (_nativeProcess.standardOutput.bytesAvailable);						trace ("cleanup output: " + output);			dispatchEvent (new SVNEvent (SVNEvent.CLEANUP_COMMAND_DATA_RECIEVED));		}				private function cleanupLocalRepoExitHandler (event:NativeProcessExitEvent):void		{			trace ("-cleanup exit-\n");			removeNativeProcessListeners ();			clearObjectsAssociatedWithNativeProcess ();						dispatchEvent (new SVNEvent (SVNEvent.CLEANUP_COMMAND_COMPLETE, {exitCode:event.exitCode}));		}				private function listBranchNamesOutputDataHandler (event:ProgressEvent):void		{			var output:String = _nativeProcess.standardOutput.readUTFBytes (_nativeProcess.standardOutput.bytesAvailable);						trace ("list output: " + output);			var pattern:RegExp = new RegExp(".+[\/]", "ig");			var branchArray:Array = output.match (pattern);						dispatchEvent (new SVNEvent (SVNEvent.LIST_COMMAND_DATA_RECIEVED, {outputDataArray:branchArray}));		}				private function listBranchNamesExitHandler (event:NativeProcessExitEvent):void		{			trace ("-list exit-\n");			removeNativeProcessListeners ();			clearObjectsAssociatedWithNativeProcess ();						dispatchEvent (new SVNEvent (SVNEvent.LIST_COMMAND_COMPLETE, {exitCode:event.exitCode}));		}				private function checkoutRepoOutputDataHandler (event:ProgressEvent):void		{			var output:String = _nativeProcess.standardOutput.readUTFBytes (_nativeProcess.standardOutput.bytesAvailable);						trace ("checkout output: " + output);			dispatchEvent (new SVNEvent (SVNEvent.CHECKOUT_COMMAND_PROGRESS, {standardOutput:output}));		}				private function checkoutRepoExitHandler (event:NativeProcessExitEvent):void		{			trace ("-checkout exit-\n");			removeNativeProcessListeners ();			clearObjectsAssociatedWithNativeProcess ();						dispatchEvent (new SVNEvent (SVNEvent.CHECKOUT_COMMAND_COMPLETE, {exitCode:event.exitCode}));		}				private function exportFileOutputDataHandler (event:ProgressEvent):void		{			var output:String = _nativeProcess.standardOutput.readUTFBytes (_nativeProcess.standardOutput.bytesAvailable);						trace ("export output: " + output);			dispatchEvent (new SVNEvent (SVNEvent.EXPORT_COMMAND_PROGRESS, {standardOutput:output}));		}				private function exportFileExitHandler (event:NativeProcessExitEvent):void		{				trace ("-export exit-\n");			removeNativeProcessListeners ();			clearObjectsAssociatedWithNativeProcess ();						dispatchEvent (new SVNEvent (SVNEvent.EXPORT_COMMAND_COMPLETE, {exitCode:event.exitCode}));		}				private function addOutputDataHandler (event:ProgressEvent):void		{			var output:String = _nativeProcess.standardOutput.readUTFBytes (_nativeProcess.standardOutput.bytesAvailable);						trace ("add output: " + output);			dispatchEvent (new SVNEvent (SVNEvent.ADD_COMMAND_PROGRESS, {standardOutput:output}));		}				private function addExitHandler (event:NativeProcessExitEvent):void		{			trace ("-add exit-\n");			removeNativeProcessListeners ();			clearObjectsAssociatedWithNativeProcess ();						dispatchEvent (new SVNEvent (SVNEvent.ADD_COMMAND_COMPLETE, {exitCode:event.exitCode}));		}				private function commitOutputDataHandler (event:ProgressEvent):void		{			var output:String = _nativeProcess.standardOutput.readUTFBytes (_nativeProcess.standardOutput.bytesAvailable);						trace ("commit output: " + output);			dispatchEvent (new SVNEvent (SVNEvent.COMMIT_COMMAND_PROGRESS, {standardOutput:output}));		}				private function commitExitHandler (event:NativeProcessExitEvent):void		{			trace ("-commit exit-\n");			removeNativeProcessListeners ();						clearObjectsAssociatedWithNativeProcess ();						dispatchEvent (new SVNEvent (SVNEvent.COMMIT_COMMAND_COMPLETE, {exitCode:event.exitCode}));		}				//-------------------------------------------------------------------------------		//--shared private methods		//-------------------------------------------------------------------------------		private function standardErrorDataHandler (event:ProgressEvent):void		{			var errorString:String = _nativeProcess.standardError.readUTFBytes (_nativeProcess.standardError.bytesAvailable);						trace (errorString);						if (errorString.indexOf ("Authorisation") > -1)			{				dispatchEvent (new SVNEvent (SVNEvent.LOGIN_FAILED));			}		}				private function standardErrorIOErrorHandler (event:IOErrorEvent):void		{			trace ("onIOError \n" + event.toString());						removeNativeProcessListeners ();			clearObjectsAssociatedWithNativeProcess ();		}				private function addNativeProcessListeners ():void		{			_nativeProcess.addEventListener (ProgressEvent.STANDARD_OUTPUT_DATA, _nativeProcessEventHandlerObject.standardOutputDataHandler, false, 0, true);			//_nativeProcess.addEventListener (ProgressEvent.STANDARD_INPUT_PROGRESS, _nativeProcessEventHandlerObject.standardInputProgressHandler);			_nativeProcess.addEventListener (NativeProcessExitEvent.EXIT, _nativeProcessEventHandlerObject.exitHandler, false, 0, true);			_nativeProcess.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, _nativeProcessEventHandlerObject.standardErrorDataHandler, false, 0, true);			_nativeProcess.addEventListener (IOErrorEvent.STANDARD_ERROR_IO_ERROR, _nativeProcessEventHandlerObject.standardErrorIOErrorHandler, false, 0, true);		}				private function removeNativeProcessListeners ():void		{			_nativeProcess.removeEventListener (ProgressEvent.STANDARD_OUTPUT_DATA, _nativeProcessEventHandlerObject.standardOutputDataHandler);			//_nativeProcess.removeEventListener (ProgressEvent.STANDARD_INPUT_PROGRESS, _nativeProcessEventHandlerObject.standardInputProgressHandler);			_nativeProcess.removeEventListener (NativeProcessExitEvent.EXIT, _nativeProcessEventHandlerObject.exitHandler);			_nativeProcess.removeEventListener(ProgressEvent.STANDARD_ERROR_DATA, _nativeProcessEventHandlerObject.standardErrorDataHandler);			_nativeProcess.removeEventListener (IOErrorEvent.STANDARD_ERROR_IO_ERROR, _nativeProcessEventHandlerObject.standardErrorIOErrorHandler);		}				private function clearObjectsAssociatedWithNativeProcess ():void		{			_nativeProcessRunning = false;			_nativeProcessArgsVector.length = 0;			_nativeProcessStartupInfo.workingDirectory = null;						_nativeProcessEventHandlerObject.standardOutputDataHandler = undefined;			_nativeProcessEventHandlerObject.exitHandler = undefined;			_nativeProcessEventHandlerObject.standardErrorDataHandler = undefined;			_nativeProcessEventHandlerObject.standardErrorIOErrorHandler = undefined;		}	}}